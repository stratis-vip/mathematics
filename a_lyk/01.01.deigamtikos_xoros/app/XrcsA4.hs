module XrcsA4(exercise_4) where

import Data.Algebra.Helpers

exercise_4 :: IO ()
exercise_4 = do
  -- \| ΕΚΦΩΝΗΣΗ
  prepareText $
    "4. Ένα ξενοδοχείο προσφέρει γεύμα που αποτελείται από τρία πιάτα. Το κύριο πιάτο, το συνοδευτικό και το γλυκό. Οι δυνατές επιλογές δίνονται στον παρακάτω πίνακα:\n\
\   Γεύμα\tΕπιλογές\n\
\   ---------------------------------------\n\
\   Κύριο πιάτο \tΚοτόπουλο ή φιλέτο\n\
\   Συνοδευτικό \tΜακαρόνια ή ρύζι ή χόρτα\n\
\   Γλυκό \tΠαγωτό ή τούρτα ή ζελέ\n\n\
\Ένα άτομο πρόκειται να διαλέξει ένα είδος από κάθε πιάτο,\n\
\  i) Να βρείτε το δειγματικό χώρο του πειράματος\n\
\ ii) Να βρείτε το ενδεχόμενο Α: \"το άτομο επιλέγει παγωτό\"\n\
\iii) Να βρείτε το ενδεχόμενο Β: \"το άτομο επιλέγει κοτόπουλο\"\n\
\ iv) Να βρείτε το ενδεχόμενο Α ∩ Β \
\  v) Αν Γ το ενδεχόμενο: \"το άτομο επιλέγει ρύζι\", να βρείτε το ενδεχόμενο ( ) Α ∩ Β ∩ Γ."

  -- \| ΔΕΔΟΜΕΝΑ
  -- οι πιθανές εκβάσεις είναι  για κύριο πιάτο 'Κ'οτόπουλο ή 'Φ'ιλέτο, 
  -- για συνοδευτικό 'Μ'ακαρόνια ή 'Ρ'ύζι ή 'Χόρτα
  -- για γλυκό 'Π'αγωτό ή 'Τ'ούρτα ή 'Ζ'ελέ

  let _W1 = ['Κ', 'Φ']
  let _W2 = ['Μ','Ρ','Χ']
  let _W3 = ['Π','Τ','Ζ']
  let _W = [(x,y,z) | x <- _W1, y <-_W2, z <-_W3]

  -- ii το ενεδεχόμενο Α το άτομο επιλέγει παγωτό
  let _A = filter (\(_, _, b) -> b == 'Π') _W
  --
  -- iii το ενδεχόμενο Β: το άτομο επιλέγει κοτόπουλο
  let _B = filter (\(a, _, _ ) -> a == 'Κ') _W

  let _AtB = [x | x <- _A , elem x _B]
  let _C = filter (\(_, b, _ ) -> b == 'Ρ') _W 

  let _AtBtC = [x | x <- _A , elem x _B, elem x _C]
  --
  -- \| ΛΥΣΗ
  prepareText $
    "\nΛΥΣΗ\n----\nΟι πιθανές εκβάσεις είναι \n\
    \    για κύριο πιάτο 'Κ'οτόπουλο ή 'Φ'ιλέτο, ω1=  { 'Κ', 'Φ' } \n\
    \    για συνοδευτικό 'Μ'ακαρόνια ή 'Ρ'ύζι ή 'Χόρτα, ω2 = { 'Μ', 'Ρ', 'Χ' }\n\
    \    για γλυκό 'Π'αγωτό ή 'Τ'ούρτα ή 'Ζ'ελέ, ω3 = { 'Π', 'Τ', 'Ζ' }\n\n"
      ++ "  i) O δειγματικός χώρος Ω είναι το καρτεσιανό γινομένο\n     Ω = ω1 x ω2 x ω3=> "
      ++ formatSampleSpace tripleFormatter "Ω" _W
      ++ "\n\n ii) Για το ενδεχόμενο Α ⊆ Ω, ισχύει Α = {(x,y,z) ∈ Ω | z = 'Π'}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace tripleFormatter "A" _A
      ++ "\n\niii) Για το ενδεχόμενο  Β ⊆ Ω, ισχύει Β = {(x,y,z) ∈ Ω | x = 'Κ'}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace tripleFormatter "Β" _B
      ++ "\n\niv) Για το ενδεχόμενο  A ∩ Β ⊆ Ω, ισχύει C = { x ∈ Ω | (x ∈ A) ∧ (x ∈ B) }. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace tripleFormatter "C" _AtB
      ++ "\n\n v) Για το ενδεχόμενο  Γ ⊆ Ω, ισχύει Γ = {(x,y,z) ∈ Ω | y = 'Ρ'}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace tripleFormatter "Γ" _C
      
      ++ "\n\n     Για το ενδεχόμενο  A ∩ Β ∩ C ⊆ Ω, ισχύει D = { x ∈ Ω | (x ∈ A) ∧ (x ∈ B) ∧ (x ∈ Γ)}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace tripleFormatter "D" _AtBtC

tripleFormatter :: (Char, Char, Char) -> String
tripleFormatter (a,b,c) = "('" ++ [a] ++ "', '" ++ [b] ++ "', '" ++ [c] ++"')"

