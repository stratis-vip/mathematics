module XrcsA5 (exercise_5) where

import Data.Algebra.Helpers

exercise_5 :: IO ()
exercise_5 = do
  -- \| ΕΚΦΩΝΗΣΗ
  prepareText $
    "5. Η διεύθυνση ενός νοσοκομείου κωδικοποιεί τους ασθενείς σύμφωνα με το αν είναι \
    \ασφαλισμένοι ή όχι και σύμφωνα με την κατάσταση της υγείας τους, η οποία χαρακτηρίζεται ως καλή, \
    \μέτρια, σοβαρή ή κρίσιμη. Η διεύθυνση καταγράφει με 0 τον \
    \ανασφάλιστο ασθενή και με 1 τον ασφαλισμένο, και στη συνέχεια δίπλα γράφει ένα \
    \από τα γράμματα α, β, γ ή δ, ανάλογα με το αν η κατάστασή του είναι καλή, μέτρια, \
    \σοβαρή ή κρίσιμη. Θεωρούμε το πείραμα της κωδικοποίησης ενός νέου ασθενούς.\n\
    \Να βρείτε:\n\
    \  i) Το δειγματικό χώρο Ω του πειράματος.\n\
    \ ii) Το ενδεχόμενο Α: \"η κατάσταση του ασθενούς είναι σοβαρή ή κρίσιμη και είναι ανασφάλιστος\",\n\
    \iii) Το ενδεχόμενο Β: \"η κατάσταση του ασθενούς είναι καλή ή μέτρια\",\n\
    \ iv) Το ενδεχόμενο Γ: \"ο ασθενής είναι ασφαλισμένος\"."

  -- \| ΔΕΔΟΜΕΝΑ

  let _W1 = [0, 1] :: [Int]
  let _W2 = ['α', 'β', 'γ', 'δ'] :: [Char]
  let _W = [(x :: Int, y :: Char) | x <- _W1, y <- _W2]

  let _A = filter (\(a, b) -> a == 0 && b > 'β') _W
  let _B = filter (\(_, b) -> b == 'β') _W

  let _C = filter (\(a, _) -> a == 1) _W

  -- \| ΛΥΣΗ
  prepareText $
    "\nΛΥΣΗ\n----\nΟι πιθανές εκβάσεις είναι \n\
    \    ω1 =  { 0 , 1 } όσον αφορά την ασφάλεια\n\
    \    και ω2 = { α, β, γ, δ } όσον αφορά την κρισιμότητα\n\n"
      ++ "  i) O δειγματικός χώρος Ω είναι το καρτεσιανό γινομένο\n     Ω = ω1 x ω2 => "
      ++ formatSampleSpace intCharTupleFormatter "Ω" _W
      ++ "\n\n ii) Για το ενδεχόμενο Α ⊆ Ω, ισχύει Α = {(x,y) ∈ Ω | x = 0 ∧ y ∈ { γ, δ }}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace intCharTupleFormatter "A" _A
      ++ "\n\niii) Για το ενδεχόμενο  Β ⊆ Ω, ισχύει Β = {(x,y) ∈ Ω | y = β}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace intCharTupleFormatter "Β" _B
      ++ "\n\n v) Για το ενδεχόμενο  Γ ⊆ Ω, ισχύει Γ = {(x,y) ∈ Ω | x = 1}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace intCharTupleFormatter "Γ" _C

intCharTupleFormatter :: (Int, Char) -> String
intCharTupleFormatter (a, b) = "( " ++ show a ++ ", " ++ [b] ++ " )"
