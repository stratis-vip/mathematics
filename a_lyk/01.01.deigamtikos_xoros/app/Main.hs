module Main where

import Data.Algebra.Helpers (clearScreen, combinations, formatSampleSpace, premutables, prepareText)
import System.Exit (exitSuccess)

-- import System.Process (callCommand)
-- import Test.Hspec

main :: IO ()
main = do
  clearScreen
  putStrLn
    "ΑΣΚΗΣΕΙΣ Α' ΟΜΑΔΑΣ\n\
    \==================\n\
    \1. Άσκηση 1\n\
    \2. Άσκηση 2\n\
    \\nΔώστε επιλογή (Enter για έξοδο)."
  option <- getLine
  case read option :: Int of
    1 -> exercise_1
    2 -> exercise_2
    _ -> exitSuccess

exercise_1 :: IO ()
exercise_1 = do
  -- \| ΕΚΦΩΝΗΣΗ

  prepareText "1. Ένα κουτί έχει τρεις μπάλες, μια άσπρη, μια μαύρη και μια κόκκινη. Κάνουμε το εξής πείραμα: παίρνουμε από το κουτί μια μπάλα, καταγράφουμε το χρώμα της και την ξαναβάζουμε στο κουτί. Στη συνέχεια παίρνουμε μια δεύτερη μπάλα και καταγράφουμε επίσης το χρώμα της. (Όπως λέμε παίρνουμε διαδοχικά δύο μπάλες με επανατοποθέτηση).\n    i) Ποιος είναι ο δειγματικός χώρος του πειράματος;\n   ii) Ποιο είναι το ενδεχόμενο \"η πρώτη μπάλα να είναι κόκκινη\";\n  iii) Ποιο είναι το ενδεχόμενο \"να εξαχθεί και τις δυο φορές μπάλα με το ίδιο χρώμα;\n"

  -- \| ΔΕΔΟΜΕΝΑ
  let _W = combinations "AKM"

  -- ii η πρώτη μπάλα να είναι κοκκινη
  let _A = filter (\(a, _) -> a == 'K') _W

  -- iii να είναι ίδιες οι μπάλες
  let _B = filter (\(a, b) -> a == b) _W

  -- \| ΛΥΣΗ
  prepareText $
    "ΛΥΣΗ\n----\nΟι πιθανές εκβάσεις είναι\n    'A' -> Άσπρη μπάλα\n    'M' -> Μαύρη μπάλα\n    'K' -> Κόκκινη μπάλα\n\n  i) Εφόσον υπάρχει επανατοποθέτηση τότε ο δειγματικός χώρος Ω είναι το καρτεσιανό γινόμενο { 'Α', 'Κ', 'M' }X{ 'Α', 'Κ', 'M' } \n    "
      ++ formatSampleSpace "Ω" _W
      ++ "\n\n"
      ++ "  ii) Για το ενδεχόμενο Α ⊆ Ω, ισχύει Α = {(x,y) ∈ Ω | x = 'Κ'}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace "A" _A
      ++ "\n\n"
      ++ "iii) Για το ενδεχόμενο B ⊆ Ω, ισχύει B = {(x,y) ∈ Ω | x = y }. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace "B" _B

  -- \| ΜΕΝΟΥ ΕΠΙΛΟΓΩΝ
  putStrLn "\n\nΠίεσε οτιδήποτε για επιστροφή στις επιλογές…"
  _ <- getLine
  main

exercise_2 :: IO ()
exercise_2 = do
  -- \| ΕΚΦΩΝΗΣΗ
  prepareText $
    "2. Να επιλυθεί το προηγούμενο πρόβλημα, χωρίς όμως τώρα να  γίνει επανατοποθέτηση της πρώτης μπάλας πριν την εξαγωγή της δεύτερης. (Όπως λέμε παίρνουμε διαδοχικά δύο μπάλες χωρίς επανατοποθέτηση.)"

  -- \| ΔΕΔΟΜΕΝΑ
  -- οι πιθανές εκβάσεις είναι Α, Μ , Κ
  let _W = premutables "AKM"

  -- ii η πρώτη μπάλα να είναι κοκκινη
  let _A = filter (\(a, _) -> a == 'K') _W

  -- iii να είναι ίδιες οι μπάλες
  let _B = filter (\(a, b) -> a == b) _W

  -- \| ΛΥΣΗ
  prepareText $
    "\nΛΥΣΗ\n----\nΟι πιθανές εκβάσεις είναι\n    'A' -> Άσπρη μπάλα\n    'M' -> Μαύρη μπάλα\n    'K' -> Κόκκινη μπάλα\n\n"
      ++ "  i) Εφόσον δεν υπάρχει επανατοποθέτηση τότε ο δειγματικός χώρος Ω δεν είναι το καρτεσιανό καθως πρέπει να αφαιρεθεί από τις επιλογής της δεύτερης ρίψης το χρώμα της μπάλα της πρώτης. Οπότε:\n    "
      ++ formatSampleSpace "Ω" _W
      ++ "\n\n"
      ++ " ii) Για το ενδεχόμενο Α ⊆ Ω, ισχύει Α = {(x,y) ∈ Ω | x = 'Κ'}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace "A" _A
      ++ "\n\n"
      ++ "iii) Για το ενδεχόμενο B ⊆ Ω, ισχύει B = {(x,y) ∈ Ω | x = y }. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace "B" _B

  -- \| ΜΕΝΟΥ ΕΠΙΛΟΓΩΝ
  putStrLn "\n\nΠίεσε οτιδήποτε για επιστροφή στις επιλογές…"
  _ <- getLine
  main
