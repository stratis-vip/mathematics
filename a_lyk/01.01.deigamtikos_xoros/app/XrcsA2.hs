module XrcsA2 (exercise_2) where

import Data.Algebra.Helpers

exercise_2 :: IO ()
exercise_2 = do
  -- \| ΕΚΦΩΝΗΣΗ
  prepareText $
    "2. Να επιλυθεί το προηγούμενο πρόβλημα, χωρίς όμως τώρα να  γίνει επανατοποθέτηση της πρώτης μπάλας πριν την εξαγωγή της δεύτερης. (Όπως λέμε παίρνουμε διαδοχικά δύο μπάλες χωρίς επανατοποθέτηση.)"

  -- \| ΔΕΔΟΜΕΝΑ
  -- οι πιθανές εκβάσεις είναι Α, Μ , Κ
  let _W = premutables "AKM"

  -- ii η πρώτη μπάλα να είναι κοκκινη
  let _A = filter (\(a, _) -> a == 'K') _W

  -- iii να είναι ίδιες οι μπάλες
  let _B = filter (\(a, b) -> a == b) _W

  -- \| ΛΥΣΗ
  prepareText $
    "\nΛΥΣΗ\n----\nΟι πιθανές εκβάσεις είναι\n    'A' -> Άσπρη μπάλα\n    'M' -> Μαύρη μπάλα\n    'K' -> Κόκκινη μπάλα\n\n"
      ++ "  i) Εφόσον δεν υπάρχει επανατοποθέτηση τότε ο δειγματικός χώρος Ω δεν είναι το καρτεσιανό καθως πρέπει να αφαιρεθεί από τις επιλογής της δεύτερης ρίψης το χρώμα της μπάλα της πρώτης. Οπότε:\n    "
      ++ formatSampleSpace tupleFormatter "Ω" _W
      ++ "\n\n"
      ++ " ii) Για το ενδεχόμενο Α ⊆ Ω, ισχύει Α = {(x,y) ∈ Ω | x = Κ}. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace tupleFormatter "A" _A
      ++ "\n\n"
      ++ "iii) Για το ενδεχόμενο B ⊆ Ω, ισχύει B = {(x,y) ∈ Ω | x = y }. Οπότε:"
      ++ "\n    "
      ++ formatSampleSpace tupleFormatter "B" _B
